Menu="Utilities"
Type="xmenu"
Title="Automover"
Icon="icon.png"
Tag="icon.png"
---
<?php

// Paths
$configPath = "/boot/config/plugins/automover/settings.cfg";
$pidFile = "/var/run/automover.pid";
$lastRunFile = "/var/log/automover_last_run.log";

// Load settings
$settings = @parse_ini_file($configPath) ?: [];

// Defaults
$threshold = $settings['THRESHOLD'] ?? 80;
$dryRun = $settings['DRY_RUN'] ?? 'no';
$interval = $settings['INTERVAL'] ?? 60;
$selectedDisk = $settings['POOL_NAME'] ?? 'cache';

// Create config file with defaults if it doesn't exist
if (!file_exists($configPath)) {
    $lines = [];
    foreach ($defaultSettings as $key => $value) {
        $lines[] = "$key=$value";
    }
    file_put_contents($configPath, implode(PHP_EOL, $lines));
}

// Load disk list
$diskData = @parse_ini_file("/var/local/emhttp/disks.ini", true) ?: [];
$disks = [];
foreach ($diskData as $disk) {
    if (!isset($disk['name'])) continue;
    $name = $disk['name'];
    if (in_array($name, ['parity', 'parity2', 'flash']) || strpos($name, 'disk') !== false) continue;
    $disks[] = $name;
}

// Read last run timestamp
$lastRun = "Never";
if (file_exists($lastRunFile)) {
    $lastRun = trim(file_get_contents($lastRunFile));
}

// Save settings
$message = "";
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['save'])) {
        $newSettings = [
            'POOL_NAME' => $_POST['POOL_NAME'] ?? '',
            'THRESHOLD' => $_POST['THRESHOLD'] ?? '',
            'DRY_RUN' => $_POST['DRY_RUN'] ?? 'no',
            'INTERVAL' => $_POST['INTERVAL'] ?? 60,
        ];
        file_put_contents($configPath, http_build_query($newSettings, '', PHP_EOL));
        $threshold = $newSettings['THRESHOLD'];
        $dryRun = $newSettings['DRY_RUN'];
        $interval = $newSettings['INTERVAL'];
        $selectedDisk = $newSettings['POOL_NAME'];
        $message = "<div id='messageBox'>‚úÖ Settings saved!</div>";
    }
    if (isset($_POST['start'])) {
        exec("/usr/bin/automover.sh >/dev/null 2>&1 &");
        $message = "<div id='messageBox'>‚ñ∂Ô∏è Automover started</div>";
    }
    if (isset($_POST['stop'])) {
        if (file_exists($pidFile)) {
            $pid = trim(file_get_contents($pidFile));
            if (is_numeric($pid)) {
                exec("kill $pid");
                unlink($pidFile);
                $message = "<div id='messageBox'>‚õî Automover stopped</div>";
            }
        } else {
            $message = "<div id='messageBox'>‚ÑπÔ∏è No running process</div>";
        }
    }
}

// Initial service status
$serviceStatus = "‚ö™ Not Running";
if (file_exists($pidFile)) {
    $pid = trim(file_get_contents($pidFile));
    if (is_numeric($pid) && file_exists("/proc/$pid")) {
        $serviceStatus = "üü¢ Running";
    } else {
        $serviceStatus = "‚ö†Ô∏è Stale PID";
    }
}
?>

<style>
#messageBox {
	font-size: 14px;
    padding: 10px;
    margin-top: 10px;
    transition: opacity 0.5s ease;
}

.formRow {
    display: grid;
    grid-template-columns: 200px min-content;
    align-items: center;
    column-gap: 15px;
    margin-bottom: 0px; /* no external gap */
    height: 30px;
}

.formRow * {
    margin: 0;
    padding: 0;
    line-height: 30px;
    font-size: 14px;
    box-sizing: border-box;
    vertical-align: bottom;
}

.formRow label {
    font-weight: bold;
    line-height: 30px;
}

.fixedInput {
  width: 40px !important;
  height: 22px;
  padding: 2px 4px;
  font-size: 13px;
  line-height: 22px;
  box-sizing: border-box;
  vertical-align: middle;
}

.poolSelect,
.dryRunSelect {
    height: 30px;
    padding-top: 4px;
    padding-bottom: 0;
    font-size: 14px;
    box-sizing: border-box;
    width: fit-content;
    min-width: 30px;
    padding-right: 1em;
}

.labelGroup {
    position: relative;
    display: inline-block;
}

.labelWithTooltip {
    font-weight: bold;
    cursor: help;
}

/* Tooltip box defaults */
.tooltipBox {
    position: absolute;
    top: 100%;
    left: 0;
    margin-top: 4px;
    padding: 6px 8px;
    background: #2b2b2b;
    color: #fff;
    font-size: 13px;
    border-radius: 4px;
    white-space: nowrap;
    box-shadow: 0 2px 4px rgba(0,0,0,0.3);
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.2s ease, visibility 0.2s ease;
    pointer-events: none;
}

/* Reveal on hover with delay */
.labelGroup:hover .tooltipBox {
    opacity: 1;
    visibility: visible;
    transition-delay: 0.4s; /* approx native tooltip delay */
}

.buttonGroup {
    position: relative;
    display: inline-block;
    margin-right: 10px;
}

.buttonGroup .tooltipBox {
    position: absolute;
    top: 100%;
    left: 0;
    margin-top: 4px;
    padding: 6px 8px;
    background: #2b2b2b;
    color: #fff;
    font-size: 13px;
    border-radius: 4px;
    white-space: nowrap;
    box-shadow: 0 2px 4px rgba(0,0,0,0.3);
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    pointer-events: none;
    transition: opacity 0.2s ease, visibility 0.2s ease;
}

/* Reveal tooltip on hover after a short delay */
.buttonGroup:hover .tooltipBox {
    opacity: 1;
    visibility: visible;
    transition-delay: 0.4s;
}
</style>

<h2>Settings</h2>

<?= $message ?>

<form method="POST">
    <div class="formRow">
        <div class="labelGroup">
            <span class="labelWithTooltip">Pool:</span>
            <div class="tooltipBox">Select the pool to monitor for mover threshold</div>
        </div>
        <select name="POOL_NAME" class="poolSelect">
            <?php foreach ($disks as $disk):
                $mountPoint = "/mnt/{$disk}";
                $usedPercent = trim(shell_exec("df --output=pcent $mountPoint | tail -1 | tr -d ' %\n'"));
                if ($usedPercent === '') $usedPercent = 'N/A';
            ?>
                <option value="<?=htmlspecialchars($disk)?>" <?= $disk === $selectedDisk ? 'selected' : '' ?>>
                    <?=htmlspecialchars($disk)?> [<?=htmlspecialchars($usedPercent)?>%]
                </option>
            <?php endforeach; ?>
        </select>
    </div>

    <div class="formRow">
        <div class="labelGroup">
            <span class="labelWithTooltip">Threshold (%):</span>
            <div class="tooltipBox">Mover starts when pool usage exceeds this percentage</div>
        </div>
        <input type="number" name="THRESHOLD" value="<?=htmlspecialchars($threshold)?>" min="1" max="100" class="fixedInput">
    </div>

    <div class="formRow">
        <div class="labelGroup">
            <span class="labelWithTooltip">Interval (seconds):</span>
            <div class="tooltipBox">Automover checks pool usage at this interval</div>
        </div>
        <input type="number" name="INTERVAL" value="<?=htmlspecialchars($interval)?>" min="10" class="fixedInput">
    </div>

    <div class="formRow">
        <div class="labelGroup">
            <span class="labelWithTooltip">Dry Run:</span>
            <div class="tooltipBox">Simulates actions without moving files</div>
        </div>
        <select name="DRY_RUN" class="dryRunSelect">
            <option value="no" <?= $dryRun === 'no' ? 'selected' : '' ?>>No</option>
            <option value="yes" <?= $dryRun === 'yes' ? 'selected' : '' ?>>Yes</option>
        </select>
    </div>

    <br>
<div class="buttonGroup">
    <button type="submit" name="save">üíæ Save Settings</button>
    <div class="tooltipBox">Saves your current pool, threshold, and interval configuration</div>
</div>

<div class="buttonGroup">
    <button type="submit" name="start">‚ñ∂Ô∏è Start</button>
    <div class="tooltipBox">Starts Automover in the background using saved settings</div>
</div>

<div class="buttonGroup">
    <button type="submit" name="stop">‚õî Stop</button>
    <div class="tooltipBox">Stops Automover if it is currently running</div>
</div>
</form>

<hr>
<p><strong>Status:</strong> <span id="statusText"><?= $serviceStatus ?></span></p>
<p><strong>Last Mover Run Attempt:</strong> <span id="lastRunText"><?= htmlspecialchars($lastRun) ?></span></p>

<script>
function updateStatus() {
    fetch('/plugins/automover/helpers/status.php')
        .then(res => res.text())
        .then(text => {
            document.getElementById('statusText').textContent = text;
        })
        .catch(err => console.error('Error fetching status:', err));
}
// Initial update
updateStatus();
setInterval(updateStatus, 5000);

function updatePoolUsage() {
    fetch('/plugins/automover/helpers/pool_usage.php')
        .then(res => res.json())
        .then(data => {
            const select = document.querySelector('select[name="POOL_NAME"]');
            if (!select) return;

            [...select.options].forEach(opt => {
                const disk = opt.value;
                if (data[disk]) {
                    opt.textContent = `${disk} [${data[disk]}%]`;
                }
            });
        })
        .catch(err => console.error("Failed to update pool usage:", err));
}

// Initial fetch
updatePoolUsage();

// Refresh every 10 seconds
setInterval(updatePoolUsage, 10000);

function updateLastRun() {
    fetch('/plugins/automover/helpers/last_run.php')
        .then(res => res.text())
        .then(text => {
            document.getElementById('lastRunText').textContent = text;
        })
        .catch(err => console.error('Error fetching last run:', err));
}
// Initial update
updateLastRun();
// Repeat every 10 seconds
setInterval(updateLastRun, 10000);

// Auto-hide message
document.addEventListener('DOMContentLoaded', () => {
    const msg = document.getElementById('messageBox');
    if (msg && msg.textContent.trim() !== '') {
        setTimeout(() => {
            msg.style.opacity = '0';
            setTimeout(() => msg.style.display = 'none', 500);
        }, 3000);
    }
});
</script>
