Menu="Utilities"
Type="xmenu"
Title="Automover"
Icon="icon.png"
Tag="icon.png"
---
<?php

// Paths
$configPath = "/boot/config/plugins/automover/settings.cfg";
$pidFile = "/var/run/automover.pid";
$lastRunFile = "/boot/config/plugins/automover/automover_last_run.txt";
$goFile = "/boot/config/go";
$autostartComment = "# Start Automover on boot";
$autostartLine = "/usr/bin/automover.sh >/dev/null 2>&1 &";

// Load settings
$settings = @parse_ini_file($configPath) ?: [];

// Defaults
$threshold = $settings['THRESHOLD'] ?? 80;
$dryRun = $settings['DRY_RUN'] ?? 'no';
$interval = $settings['INTERVAL'] ?? 60;
$selectedDisk = $settings['POOL_NAME'] ?? 'cache';

// Load disk list
$diskData = @parse_ini_file("/var/local/emhttp/disks.ini", true) ?: [];
$disks = [];
foreach ($diskData as $disk) {
    if (!isset($disk['name'])) continue;
    $name = $disk['name'];
    if (in_array($name, ['parity', 'parity2', 'flash']) || strpos($name, 'disk') !== false) continue;
    $disks[] = $name;
}

// Read last run timestamp
$lastRun = "Never";
if (file_exists($lastRunFile)) {
    $lastRun = trim(file_get_contents($lastRunFile));
}

// Check autostart status
$goContents = file_exists($goFile) ? file($goFile, FILE_IGNORE_NEW_LINES) : [];
$autostartEnabled = in_array($autostartLine, $goContents);

// Save settings
$message = "";
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    if (isset($_POST['save'])) {
        $newSettings = [
            'POOL_NAME' => $_POST['POOL_NAME'] ?? '',
            'THRESHOLD' => $_POST['THRESHOLD'] ?? '',
            'DRY_RUN' => $_POST['DRY_RUN'] ?? 'no',
            'INTERVAL' => $_POST['INTERVAL'] ?? 60,
        ];
        file_put_contents($configPath, http_build_query($newSettings, '', PHP_EOL));
        $threshold = $newSettings['THRESHOLD'];
        $dryRun = $newSettings['DRY_RUN'];
        $interval = $newSettings['INTERVAL'];
        $selectedDisk = $newSettings['POOL_NAME'];
		
		// Handle autostart checkbox
        $enableAutostart = isset($_POST['AUTOSTART']);
        if ($enableAutostart && !$autostartEnabled) {
            file_put_contents($goFile, PHP_EOL . $autostartComment . PHP_EOL . $autostartLine . PHP_EOL, FILE_APPEND);
            $autostartEnabled = true;
        } elseif (!$enableAutostart && $autostartEnabled) {
            $goContents = array_filter($goContents, function ($line) use ($autostartLine, $autostartComment) {
                return trim($line) !== $autostartLine && trim($line) !== $autostartComment;
            });
            file_put_contents($goFile, implode(PHP_EOL, $goContents) . PHP_EOL);
            $autostartEnabled = false;
        }
		
        $message = "<div id='messageBox'>‚úÖ Settings saved!</div>";
    }
    if (isset($_POST['start'])) {
        exec("/usr/bin/automover.sh >/dev/null 2>&1 &");
        $message = "<div id='messageBox'>‚ñ∂Ô∏è Automover started</div>";
    }
    if (isset($_POST['stop'])) {
        if (file_exists($pidFile)) {
            $pid = trim(file_get_contents($pidFile));
            if (is_numeric($pid)) {
                exec("kill $pid");
                unlink($pidFile);
                $message = "<div id='messageBox'>‚õî Automover stopped</div>";
            }
        } else {
            $message = "<div id='messageBox'>‚ÑπÔ∏è No running process</div>";
        }
    }
}

// Initial service status
$serviceStatus = "‚ö™ Not Running";
if (file_exists($pidFile)) {
    $pid = trim(file_get_contents($pidFile));
    if (is_numeric($pid) && file_exists("/proc/$pid")) {
        $serviceStatus = "üü¢ Running";
    } else {
        $serviceStatus = "‚ö†Ô∏è Stale PID";
    }
}
?>

<h2>Automover Plugin</h2>

<?= $message ?>

<form method="POST">
    <label><strong>Pool:</strong></label><br>
    <select name="POOL_NAME">
        <?php foreach ($disks as $disk):
            $mountPoint = "/mnt/{$disk}";
            $usedPercent = trim(shell_exec("df --output=pcent $mountPoint | tail -1 | tr -d ' %\n'"));
            if ($usedPercent === '') $usedPercent = 'N/A';
        ?>
            <option value="<?=htmlspecialchars($disk)?>" <?= $disk === $selectedDisk ? 'selected' : '' ?>>
                <?=htmlspecialchars($disk)?> [<?=htmlspecialchars($usedPercent)?>%]
            </option>
        <?php endforeach; ?>
    </select><br><br>

    <label><strong>Threshold (%)</strong></label><br>
    <input type="number" name="THRESHOLD" value="<?=htmlspecialchars($threshold)?>" min="1" max="100"><br><br>

    <label><strong>Dry Run:</strong></label><br>
    <select name="DRY_RUN">
        <option value="no" <?= $dryRun === 'no' ? 'selected' : '' ?>>No</option>
        <option value="yes" <?= $dryRun === 'yes' ? 'selected' : '' ?>>Yes</option>
    </select><br><br>

    <label><strong>Interval (seconds):</strong></label><br>
    <input type="number" name="INTERVAL" value="<?=htmlspecialchars($interval)?>" min="10"><br><br>
	
	<label>
		<input type="checkbox" name="AUTOSTART" <?= $autostartEnabled ? 'checked' : '' ?>> Start Automover on boot
    </label><br><br>

    <button type="submit" name="save">üíæ Save Settings</button>
    <button type="submit" name="start">‚ñ∂Ô∏è Start</button>
    <button type="submit" name="stop">‚õî Stop</button>
</form>

<hr>
<p><strong>Status:</strong> <span id="statusText"><?= $serviceStatus ?></span></p>
<p><strong>Last Mover Run:</strong> <span id="lastRunText"><?= htmlspecialchars($lastRun) ?></span></p>

<style>
#messageBox {
	font-size: 14px;
    padding: 10px;
    margin-top: 10px;
    transition: opacity 0.5s ease;
}
</style>

<script>
function updateStatus() {
    fetch('/plugins/automover/helpers/status.php')
        .then(res => res.text())
        .then(text => {
            document.getElementById('statusText').textContent = text;
        })
        .catch(err => console.error('Error fetching status:', err));
}
// Initial update
updateStatus();
setInterval(updateStatus, 5000);

function updateLastRun() {
    fetch('/plugins/automover/helpers/last_run.php')
        .then(res => res.text())
        .then(text => {
            document.getElementById('lastRunText').textContent = text;
        })
        .catch(err => console.error('Error fetching last run:', err));
}
// Initial update
updateLastRun();
// Repeat every 10 seconds
setInterval(updateLastRun, 10000);

// Auto-hide message
document.addEventListener('DOMContentLoaded', () => {
    const msg = document.getElementById('messageBox');
    if (msg && msg.textContent.trim() !== '') {
        setTimeout(() => {
            msg.style.opacity = '0';
            setTimeout(() => msg.style.display = 'none', 500);
        }, 3000);
    }
});
</script>
